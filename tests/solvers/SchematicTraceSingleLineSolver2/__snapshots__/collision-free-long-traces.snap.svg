<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="left_pin
x+" data-x="-4.5" data-y="0" cx="90.90909090909093" cy="288.1818181818182" r="3" fill="hsl(69, 100%, 50%, 0.8)" />
  </g>
  <g>
    <circle data-type="point" data-label="right_pin
x-" data-x="4.5" data-y="2" cx="549.090909090909" cy="186.36363636363637" r="3" fill="hsl(34, 100%, 50%, 0.8)" />
  </g>
  <g>
    <polyline data-points="-4.5,0 -4.3,0 0,0 0,2 4.3,2 4.5,2" data-type="line" data-label="" points="90.90909090909093,288.1818181818182 101.09090909090912,288.1818181818182 320,288.1818181818182 320,186.36363636363637 538.9090909090909,186.36363636363637 549.090909090909,186.36363636363637" fill="none" stroke="red" stroke-width="1" stroke-dasharray="4 4" />
  </g>
  <g>
    <polyline data-points="-4.5,0 4.5,2" data-type="line" data-label="" points="90.90909090909093,288.1818181818182 549.090909090909,186.36363636363637" fill="none" stroke="blue" stroke-width="1" stroke-dasharray="5 5" />
  </g>
  <g>
    <polyline data-points="-4.5,0 -4.3,0 0,0 0,2 4.3,2 4.5,2" data-type="line" data-label="" points="90.90909090909093,288.1818181818182 101.09090909090912,288.1818181818182 320,288.1818181818182 320,186.36363636363637 538.9090909090909,186.36363636363637 549.090909090909,186.36363636363637" fill="none" stroke="green" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="chip_left" data-x="-5" data-y="0" x="40" y="262.72727272727275" width="50.909090909090935" height="50.90909090909088" fill="hsl(162, 100%, 50%, 0.1)" stroke="black" stroke-width="0.019642857142857142" />
  </g>
  <g>
    <rect data-type="rect" data-label="chip_right" data-x="5" data-y="2" x="549.090909090909" y="160.90909090909093" width="50.90909090909099" height="50.90909090909088" fill="hsl(337, 100%, 50%, 0.1)" stroke="black" stroke-width="0.019642857142857142" />
  </g>
  <g>
    <rect data-type="rect" data-label="obstacle" data-x="0" data-y="-3" x="281.8181818181818" y="402.72727272727275" width="76.36363636363637" height="76.36363636363637" fill="hsl(335, 100%, 50%, 0.1)" stroke="black" stroke-width="0.019642857142857142" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 50.90909090909091,
        "c": 0,
        "e": 320,
        "b": 0,
        "d": -50.90909090909091,
        "f": 288.1818181818182
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>